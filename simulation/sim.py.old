#!/usr/bin/env python

import random
import collections

def jaccard(a, b):
    return 1 - float(len(a & b))/len(a | b)

class Synthetic:
    def __init__(self, core, ncore, extra, mextra):
        self.core = core
        self.ncore = ncore
        self.extra = extra
        self.mextra = mextra

    def job(self):
        for i in range(self.ncore):
            yield random.randrange(-self.core, 0)
        for i in range(random.randrange(self.mextra)):
            yield random.randrange(self.extra)

    def stream(self, limit):
        seen = set()
        i = 0
        while True:
            #if i % 100 == 0:
                #print(len(seen))
            if len(seen) > limit:
                return
            a = frozenset(self.job())
            seen |= a
            i += 1
            yield a

class Cache:
    def __init__(self, capacity, alpha):
        self.size = 0
        self.capacity = capacity
        self.alpha = alpha
        self.writes = 0
        self.contents = collections.OrderedDict()

    def unique(self):
        return len({item for subset in self.contents.keys() for item in subset})

    def merge(self, img):
        best_img = None
        best_dst = 2.0
        for a in self.contents.keys():
            j = jaccard(img, a)
            if j <= self.alpha:
                if j < best_dst:
                    best_dst = j
                    best_img = a
        if best_img:
            #print('merge', best_dst, best_img)
            self.contents.pop(best_img)
            self.size -= len(best_img)
            best_img |= img
            self.contents[best_img] = None
            self.size += len(best_img)
            self.writes += len(best_img)
        else:
            self.contents[img] = None
            self.size += len(img)
            self.writes += len(img)

    def shrink(self):
        while self.size > self.capacity:
            p = self.contents.popitem(False)[0]
            #print('pop', p)
            self.size -= len(p)

    def eat(self, stream):
        for a in stream:
            #print('add', a)
            self.merge(a)
            self.shrink()

if __name__ == '__main__':
    for alpha in [x / 100.0 for x in range(90, 101)]:
        print('alpha', alpha)
        s = Synthetic(400, 100, 12000, 600)
        c = Cache(3330, alpha)
        c.eat(s.stream(6667))
        #print(c.contents.keys())
        print('writes', c.writes)
        print('a', c.size)
        print('c', c.unique())
